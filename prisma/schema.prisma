// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  username       String   @unique
  fullName       String
  backgroundImage String? // optional
  backgroundImagePublicId String? // optional, for cloud storage
  avatar         String? // optional
  avatarPublicId String? // optional, for cloud storage
  bio            String? // optional
  joinDate       DateTime @default(now())
  friendsCount   Int      @default(0)
  postsCount     Int      @default(0)

  posts            Post[]          @relation("UserPosts")
  comments         Comment[]       @relation("UserComments")
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  notifications Notification[]

  Notification Notification[] @relation("FromUserNotifications")
  reactions    Reaction[]

  @@map("users")
}

model Post {
  id            String    @id @default(uuid())
  userId        String
  content       String
  image         String? // optional
  imagePublicId String? // optional, for cloud storage
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  deleted       Boolean   @default(false)
  type          PostType  @default(post)

  author    User       @relation("UserPosts", fields: [userId], references: [id])
  comments  Comment[]
  reactions Reaction[]

  notifications Notification[] // Notifications pointing to this post

  @@map("posts")
}

model Reaction {
  id        String       @id @default(uuid())
  userId    String
  postId    String
  type      ReactionType
  createdAt DateTime     @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("reactions")
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())

  author User @relation("UserComments", fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@map("comments")
}

model FriendRequest {
  id         String              @id @default(uuid())
  fromUserId String
  toUserId   String
  status     FriendRequestStatus
  createdAt  DateTime            @default(now())

  fromUser User @relation("SentRequests", fields: [fromUserId], references: [id])
  toUser   User @relation("ReceivedRequests", fields: [toUserId], references: [id])

  @@map("friend_requests")
}

model Notification {
  id         String           @id @default(uuid())
  userId     String
  type       NotificationType
  message    String
  read       Boolean          @default(false)
  createdAt  DateTime         @default(now())
  fromUserId String? // optional
  postId     String? // optional

  user     User  @relation(fields: [userId], references: [id])
  fromUser User? @relation("FromUserNotifications", fields: [fromUserId], references: [id])
  post     Post? @relation(fields: [postId], references: [id])

  @@map("notifications")
}

enum PostType {
  post
  announcement
}

enum FriendRequestStatus {
  pending
  accepted
  rejected
}

enum NotificationType {
  like
  comment
  friend_request
  friend_accepted
}

enum ReactionType {
  like
  love
  haha
  wow
  sad
  angry
  disgusted
}
